def check_password_strength(password):
  """
  Evaluates the strength of a password based on criteria.

  Args:
      password: The password to be assessed.

  Returns:
      A tuple containing:
          - strength (integer): Numeric score representing password strength (higher is better).
          - feedback (string): Descriptive feedback on the password's strength.
  """
  strength = 0
  feedback = []

  # Minimum length check
  if len(password) >= 8:
    strength += 1
  else:
    feedback.append("Password is too short. Minimum length recommended: 8 characters.")

  # Character type checks
  has_uppercase = any(char.isupper() for char in password)
  has_lowercase = any(char.islower() for char in password)
  has_digit = any(char.isdigit() for char in password)
  has_special = any(char in "!@#$%^&*()_+-=[]{};':|\,.<>/?`~" for char in password)

  if has_uppercase:
    strength += 1
  else:
    feedback.append("Password should contain uppercase letters (A-Z).")
  if has_lowercase:
    strength += 1
  else:
    feedback.append("Password should contain lowercase letters (a-z).")
  if has_digit:
    strength += 1
  else:
    feedback.append("Password should contain digits (0-9).")
  if has_special:
    strength += 1
  else:
    feedback.append("Password should contain special characters (!@#$%^&* etc.).")

  # Feedback based on strength score
  if strength == 0:
    feedback_str = "Very Weak"
  elif strength == 1 or strength == 2:
    feedback_str = "Weak"
  elif strength == 3:
    feedback_str = "Medium"
  elif strength == 4:
    feedback_str = "Strong"
  else:
    feedback_str = "Very Strong"

  return strength, "\n".join(feedback) + f"\nOverall Strength: {feedback_str}"

def main():
  while True:
    password = input("Enter your password: ")
    strength, feedback = check_password_strength(password)
    print(feedback)
    choice = input("Do you want to check another password? (y/n): ")
    if choice.lower() != "y":
      break

if __name__ == "__main__":
  main()
